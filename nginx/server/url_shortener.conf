server {
    listen 80;

    location = / {
        limit_except GET {
            deny all;
        }

        root /web;
        try_files /index.html =404;

        expires max;
    }

    location = /favicon.ico {
        limit_except GET {
            deny all;
        }

        root /web;
        try_files /favicon.ico =404;

        expires max;
    }

    location = /get/ {
        internal;

        limit_except GET {
            deny all;
        }

        redis2_query get $arg_url_key;
        redis2_pass redis:6379;
    }

    location = /set/ {
        internal;

        limit_except GET {
            deny all;
        }

        set_unescape_uri $url $arg_url;

        # TODO: To detect the start of collisions, replace setnx with getset and add a handler for this exception.
        redis2_query setnx $arg_url_key $url;
        redis2_pass redis:6379;
    }

    location = /generate/ {
        limit_except GET {
            deny all;
        }

        # shorten url with 100.000.000.000 before starting of collisions
        set_md5 $url_key $arg_url;

        content_by_lua '
            -- build short url
            local short_url = "http://localhost:180/" .. ngx.var.url_key

            local url = ngx.unescape_uri(ngx.var.arg_url)

            -- save url with its key
            ngx.location.capture(
                "/set/",
                {
                    method = ngx.HTTP_GET,
                    args = {
                        url = url,
                        url_key = ngx.var.url_key
                    }
                }
            )

            -- print link with short url
            local link = "<a href=\'" .. short_url .. "\'>" .. short_url .. "</a>"
            ngx.print(link)
        ';

        expires max;
    }

    location / {
        limit_except GET {
            deny all;
        }


        content_by_lua '

            -- remove first character "/"
            local url_key = string.sub(ngx.var.uri, 2)

            -- find url
            local res = ngx.location.capture(
                "/get/",
                {
                    method = ngx.HTTP_GET,
                    args = {
                        url_key = url_key
                    }
                }
            )

            -- remove redis resource id from redis response
            local url = string.gsub(res.body, "$%d+%s+", "")

            -- remove spaces around url from redis response
            url = string.gsub(url, "%s+", "")

            -- it not only adds a user-friendly answer, it also disables recursive redirects
            if url == "$-1" then
                ngx.exit(404)
            end

            ngx.redirect(url, 301)
        ';

        expires max;
    }
}
